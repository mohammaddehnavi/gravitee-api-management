version: 2.1

orbs:
    slack: circleci/slack@4.12.5
    keeper: gravitee-io/keeper@0.6.3
    gh: circleci/github-cli@1.0.5
    aws-cli: circleci/aws-cli@2.0.6
    artifactory-orb: jfrog/artifactory-orb@1.0.1
    aws-s3: circleci/aws-s3@3.1.1
    helm: circleci/helm@2.0.1
    snyk: snyk/snyk@1.7.2

executors:
    ubuntu:
        parameters:
            class:
                description: The resource class. Default is medium.
                type: enum
                enum: ["medium", "large", "xlarge", "2xlarge"]
                default: "medium"
            version:
                description: the version of the machine. Default is 2204
                type: string
                default: "2204"
            tag:
                description: the tag of the machine. Default is current
                type: string
                default: "current"
            with_docker_layer_caching:
                description: should we use Docker Layer Caching mechanism. Default is false
                type: boolean
                default: false
        machine:
            image: ubuntu-<< parameters.version >>:<< parameters.tag >>
            docker_layer_caching: << parameters.with_docker_layer_caching >>
        resource_class: << parameters.class >>

    openjdk:
        parameters:
            class:
                description: The resource class. Default is medium.
                type: enum
                enum: ["small", "medium", "medium+", "large", "xlarge"]
                default: "medium"
            version:
                description: the version of the JDK. Default is 17.0
                type: string
                default: "17.0"
            with_node:
                description: should we use the "node" version of the image
                type: boolean
                default: false
        docker:
            - image: cimg/openjdk:<< parameters.version >><<# parameters.with_node >>-node<</ parameters.with_node >>
        resource_class: << parameters.class >>
    node-lts:
        parameters:
            class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            - image: cimg/node:16.13
        resource_class: << parameters.class >>

    azure-cli:
        parameters:
            resource_class:
                description: The resource class
                type: enum
                enum: ["small", "medium", "large", "xlarge"]
                default: "medium"
        docker:
            # Version can be found here https://docs.microsoft.com/en-us/cli/azure/release-notes-azure-cli
            # be careful when updating the version as it looks it is not following semver
            - image: mcr.microsoft.com/azure-cli:2.34.1
        resource_class: <<parameters.resource_class>>

commands:
    cmd-create-docker-context:
        steps:
            - run:
                  name: "Create docker context for buildx"
                  command: |
                      docker context create tls-env
                      docker buildx create tls-env --use

    install-jdk-17-for-machine:
        description: Install JDK 17 on machine executor
        steps:
            - run:
                  command: |
                      sudo apt update
                      sudo apt install -y openjdk-17-jdk

    cmd-prepare-env-var:
        description: Prepare env variables used in [version.properties] files
        steps:
            - run:
                  name: Prepare env variables
                  command: |
                      export BUILD_ID=${CIRCLE_BUILD_NUM}
                      export BUILD_NUMBER=${CIRCLE_BUILD_NUM}
                      export GIT_COMMIT=$(git rev-parse --short HEAD)

                      # Workaround for sharing this variable to the next steps
                      echo "export BUILD_ID=$BUILD_ID" >> $BASH_ENV
                      echo "export BUILD_NUMBER=$BUILD_NUMBER" >> $BASH_ENV
                      echo "export GIT_COMMIT=$GIT_COMMIT" >> $BASH_ENV

    cmd-restore-maven-job-cache:
        description: Restore Maven cache for a dedicated job
        parameters:
            jobName:
                description: The job name
                type: string
                default: ""
        steps:
            - restore_cache:
                  keys:
                      - gravitee-api-management-v9-<< parameters.jobName >>-{{ .Branch }}-{{ checksum "pom.xml" }}
                      - gravitee-api-management-v9-<< parameters.jobName >>-{{ .Branch }}-
                      - gravitee-api-management-v9-<< parameters.jobName >>-
    cmd-save-maven-job-cache:
        description: Restore Maven cache for a dedicated job
        parameters:
            jobName:
                description: The job name
                type: string
                default: ""
        steps:
            - run:
                  name: "Exclude all APIM artefacts from cache."
                  command: |
                      rm -rf ~/.m2/repository/io/gravitee/apim
            - save_cache:
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-v9-<< parameters.jobName >>-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always

    cmd-notify-on-failure:
        steps:
            - keeper/env-export:
                  secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
                  var-name: SLACK_ACCESS_TOKEN
            - slack/notify:
                  channel: C02JENTV2AX
                  branch_pattern: master,[0-9]+\.[0-9]+\.x
                  event: fail
                  template: basic_fail_1

    cmd-get-apim-tag:
        steps:
            - run:
                  name: Read tag of Docker images to deploy
                  command: |
                      export TAG=$(cat ./.docker-tag.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV

    cmd-get-apim-version:
        steps:
            - run:
                  name: Read APIM version
                  command: |
                      export APIM_VERSION=$(cat ./.apim-version.txt)
                      # Workaround for sharing this variable to the next steps
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV

    cmd-prepare-gpg:
        description: Prepare GPG command
        steps:
            - keeper/install
            - run:
                  command: |
                      ksm secret notation keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/armor_format_pub_key > pub.key
                      gpg --import pub.key

                      ksm secret notation keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/armor_format_private_key > private.key
                      # Need --batch to be able to import private key
                      gpg --import --batch private.key

    cmd-webui-install:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        steps:
            - restore_cache:
                  name: Restore NPM cache
                  keys:
                      - << parameters.apim-ui-project >>-cache-v1-{{ .Branch }}-{{ checksum "<< parameters.apim-ui-project >>/package-lock.json" }}
                      - << parameters.apim-ui-project >>-cache-v1-{{ .Branch }}
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: << parameters.apim-ui-project >>
            - save_cache:
                  name: Save NPM cache
                  key: << parameters.apim-ui-project >>-cache-v1-{{ .Branch }}-{{ checksum "<< parameters.apim-ui-project >>/package-lock.json" }}
                  paths:
                      - ./<< parameters.apim-ui-project >>/node_modules

    cmd-build-ui-image:
        parameters:
            docker-image-name:
                type: string
                default: ""
                description: the name of the image
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        steps:
            - cmd-get-apim-tag
            - cmd-create-docker-context
            - cmd-docker-azure-login
            - run:
                  name: Build UI docker image
                  command: |
                      docker buildx build --push --platform=linux/arm64,linux/amd64 -f docker/Dockerfile \
                      -t graviteeio.azurecr.io/<< parameters.docker-image-name >>:$TAG \
                      .
                  working_directory: << parameters.apim-ui-project >>
            - when:
                  condition:
                      matches: { pattern: "^(\\d+\\.\\d+\\.x)|master$", value: << pipeline.git.branch >> }
                  steps:
                      - keeper/env-export:
                            secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_org_api_token
                            var-name: SNYK_API_TOKEN
                      - keeper/env-export:
                            secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_org_id
                            var-name: SNYK_ORG_ID
                      - keeper/env-export:
                            secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_acr_integration_id
                            var-name: SNYK_INTEGRATION_ID
                      - cmd-add-docker-image-in-snyk:
                            docker-image-name: << parameters.docker-image-name >>
                            version: $TAG
            - cmd-docker-azure-logout

    cmd-add-docker-image-in-snyk:
        parameters:
            docker-image-name:
                type: string
            version:
                type: string
        steps:
            - run:
                  name: Add << parameters.docker-image-name >> << parameters.version >> to Snyk
                  command: |
                      curl --fail \
                           --include \
                           --request POST \
                           --header "Content-Type: application/json; charset=utf-8" \
                           --header "Authorization: token ${SNYK_API_TOKEN}" \
                           --data-binary "{
                        \"target\": {
                          \"name\": \"<< parameters.docker-image-name >>:<< parameters.version >>\"
                        }
                      }" \
                      "https://api.snyk.io/api/v1/org/${SNYK_ORG_ID}/integrations/${SNYK_INTEGRATION_ID}/import"

    cmd-parse-gravitee-version:
        description: Parse the version of the Gravitee project and export each part in a specfic environment variable.
        parameters:
            graviteeio_version:
                default: ""
                type: string
        steps:
            - run:
                  name: Parse Gravitee version
                  command: |
                      # parse graviteeio_version
                      export GRAVITEEIO_VERSION_WITH_QUALIFIER="<< parameters.graviteeio_version >>"                    # 3.19.0-alpha.1 or 3.19.0

                      export GRAVITEEIO_VERSION=$(echo $GRAVITEEIO_VERSION_WITH_QUALIFIER | awk -F '-' '{print $1}')    # 3.19.0
                      export GRAVITEEIO_VERSION_MAJOR=$(echo $GRAVITEEIO_VERSION | awk -F '.' '{print $1}')             # 3
                      export GRAVITEEIO_VERSION_MINOR=$(echo $GRAVITEEIO_VERSION | awk -F '.' '{print $2}')             # 19 
                      export GRAVITEEIO_VERSION_PATCH=$(echo $GRAVITEEIO_VERSION | awk -F '.' '{print $3}')             # 0 

                      export GRAVITEEIO_QUALIFIER=$(echo $GRAVITEEIO_VERSION_WITH_QUALIFIER | awk -F '-' '{print $2}')  # alpha.1 or empty
                      export GRAVITEEIO_QUALIFIER_NAME=$(echo $GRAVITEEIO_QUALIFIER | awk -F '.' '{print $1}')          # alpha or empty
                      export GRAVITEEIO_QUALIFIER_VERSION=$(echo $GRAVITEEIO_QUALIFIER | awk -F '.' '{print $2}')       # 1  or empty                      

                      # export environment variables in $BASH_ENV so others commands can access them
                      echo "export GRAVITEEIO_VERSION_WITH_QUALIFIER=${GRAVITEEIO_VERSION_WITH_QUALIFIER}" >> $BASH_ENV
                      echo "export GRAVITEEIO_VERSION=${GRAVITEEIO_VERSION}" >> $BASH_ENV
                      echo "export GRAVITEEIO_VERSION_MAJOR=${GRAVITEEIO_VERSION_MAJOR}" >> $BASH_ENV
                      echo "export GRAVITEEIO_VERSION_MINOR=${GRAVITEEIO_VERSION_MINOR}" >> $BASH_ENV
                      echo "export GRAVITEEIO_VERSION_PATCH=${GRAVITEEIO_VERSION_PATCH}" >> $BASH_ENV
                      echo "export GRAVITEEIO_QUALIFIER=${GRAVITEEIO_QUALIFIER}" >> $BASH_ENV
                      echo "export GRAVITEEIO_QUALIFIER_NAME=${GRAVITEEIO_QUALIFIER_NAME}" >> $BASH_ENV
                      echo "export GRAVITEEIO_QUALIFIER_VERSION=${GRAVITEEIO_QUALIFIER_VERSION}" >> $BASH_ENV

    cmd-docker-azure-login:
        description: Login to Azure Container Registry
        steps:
            - keeper/env-export:
                  secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
                  var-name: AZURE_DOCKER_REGISTRY_USERNAME
            - keeper/env-export:
                  secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
                  var-name: AZURE_DOCKER_REGISTRY_PASSWORD
            - run:
                  name: Login to Azure Container Registry
                  command: |
                      echo $AZURE_DOCKER_REGISTRY_PASSWORD | docker login --username $AZURE_DOCKER_REGISTRY_USERNAME --password-stdin graviteeio.azurecr.io

    cmd-docker-azure-logout:
        description: Logout from Azure Container Registry
        steps:
            - run:
                  name: Logout from Azure Container Registry
                  command: docker logout graviteeio.azurecr.io

    cmd-compute-sanitize-circleci-branch:
        description: Create a sanitized version of the branch name to use in docker tag or other places
        steps:
            - run:
                  name: Sanitize branch name
                  command: |
                      export SANITIZED_BRANCH=$(echo "${CIRCLE_BRANCH}" | sed -E 's/[~^]+//g' | sed -E 's/[^a-zA-Z0-9\.]+/-/g' | sed -E 's/^-+|-+$//g' | tr "[:upper:]" "[:lower:]" | cut -c -60)
                      # Workaround for sharing this variable to the next steps
                      echo "export SANITIZED_BRANCH=$SANITIZED_BRANCH" >> $BASH_ENV

    cmd-helm-tests:
        description: execute the unit tests of the helm chart
        parameters:
            folder:
                type: string
                default: ""
                description: The name of the folder where tests to execute are.
            files:
                type: string
                default: ""
                description: The test suites files.
            output-file:
                type: string
                default: ""
                description: The name of the test result file.
        steps:
            - run:
                  name: execute the units tests in << parameters.folder >>.
                  command: helm unittest -3 -f '<< parameters.files >>' << parameters.folder >> -t JUnit -o << parameters.output-file >>

    cmd-helm-lint:
        description: Lint the helm charts available in the folder
        parameters:
            folder:
                type: string
                default: ""
                description: The name of the folder to check.
        steps:
            - run:
                  name: Lint the helm charts available in << parameters.folder >>
                  command: helm lint << parameters.folder >>

parameters:
    gio_action:
        type: enum
        enum:
            [
                full_release,
                release,
                package_bundle,
                nexus_staging,
                pull_requests,
                build_rpm,
                build_docker_images,
                release_notes_apim,
                bridge_e2e,
                publish_docker_images,
                release_helm,
                repositories_tests,
            ]
        default: pull_requests
    dry_run:
        type: boolean
        default: true
        description: "Run in dry run mode?"
    docker_tag_as_latest:
        default: false
        type: boolean
        description: "Is this version the latest version available ?"
    graviteeio_version:
        default: ""
        type: string
        description: "Version of APIM to be used in docker images"
    gio_milestone_version:
        type: string
        default: $GIO_MILESTONE_VERSION
        description: "The Gravitee.io Milestone version https://github.com/gravitee-io/issues/milestones for which we want to generate Changelog"

jobs:
    job-setup:
        executor:
            name: openjdk
            class: small
        steps:
            - checkout
            - keeper/env-export:
                  secret-url: keeper://7CgijuGiFDSLynRJt1Dm9w/custom_field/xml
                  var-name: MAVEN_SETTINGS
            - run:
                  command: echo $MAVEN_SETTINGS > .gravitee.settings.xml
            - restore_cache:
                  name: Restore Maven cache for compute-tag job
                  keys:
                      - gravitee-api-management-compute-tag-{{ .Branch }}-{{ checksum "pom.xml" }}
            - run:
                  name: Compute APIM Version
                  command: |
                      export APIM_VERSION=$(mvn -s .gravitee.settings.xml -q -Dexec.executable=echo -Dexec.args='${project.version}' --non-recursive exec:exec)
                      echo "export APIM_VERSION=$APIM_VERSION" >> $BASH_ENV
                      echo "Gravitee APIM version: ${APIM_VERSION}"
                      echo $APIM_VERSION > .apim-version.txt
            - cmd-compute-sanitize-circleci-branch
            - run:
                  name: Compute Tag for Docker images
                  command: |
                      export TAG=${SANITIZED_BRANCH}-latest
                      # Workaround for sharing this variable to the next steps
                      echo "export TAG=$TAG" >> $BASH_ENV
                      echo "Docker images will be tagged with: ${TAG}"
                      echo $TAG > .docker-tag.txt
            - save_cache:
                  name: Save Maven cache for compute-tag job
                  paths:
                      - ~/.m2
                  key: gravitee-api-management-compute-tag-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always
            - persist_to_workspace:
                  root: .
                  paths:
                      - .gravitee.settings.xml
                      - .docker-tag.txt
                      - .apim-version.txt

    job-sonarcloud-analysis:
        description: A job that run Sonarcloud analysis
        parameters:
            component:
                description: "Type of component analyzed"
                default: "rest-api"
                type: string
            working_directory:
                description: "Directory where the Sonarcloud analysis will be run"
                default: "gravitee-apim-rest-api"
                type: string
        docker:
            - image: sonarsource/sonar-scanner-cli:5.0.1
        resource_class: large
        steps:
            - run:
                  name: Add SSH tool
                  command: apk add --no-cache openssh
            - checkout
            - attach_workspace:
                  at: .
            - restore_cache:
                  keys:
                      - gravitee-api-management-v9-sonarcloud-analysis-<< parameters.component >>-{{ .Branch }}-{{ checksum "pom.xml" }}
                      - gravitee-api-management-v9-sonarcloud-analysis-<< parameters.component >>-{{ .Branch }}-
                      - gravitee-api-management-v9-sonarcloud-analysis-<< parameters.component >>-
            - keeper/env-export:
                  secret-url: keeper://9x9YgyU6DWzux4DPoHAzDQ/field/password
                  var-name: SONAR_TOKEN
            - cmd-get-apim-version
            - run:
                  name: Run Sonarcloud Analysis
                  command: sonar-scanner -Dsonar.projectVersion=${APIM_VERSION}
                  working_directory: << parameters.working_directory >>
            - cmd-notify-on-failure
            - save_cache:
                  paths:
                      - /opt/sonar-scanner/.sonar/cache
                  key: gravitee-api-management-v9-sonarcloud-analysis-<< parameters.component >>-{{ .Branch }}-{{ checksum "pom.xml" }}
                  when: always

    job-validate:
        executor:
            name: openjdk
            class: small
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: job-validate
            - run:
                  name: "validate project"
                  command: |
                      mvn -s .gravitee.settings.xml validate -Pall-modules,integration-tests-modules --no-transfer-progress -T 2C
            - cmd-save-maven-job-cache:
                  jobName: job-validate
            - cmd-notify-on-failure

    job-danger-js:
        executor:
            class: small
            name: node-lts
        steps:
            - checkout
            - keeper/env-export:
                  secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
                  var-name: DANGER_GITHUB_API_TOKEN
            - run:
                  name: Run Danger JS
                  command: cd .circleci/danger && yarn run danger

    job-add-docker-images-in-snyk:
        docker:
            - image: cimg/base:stable
        resource_class: small
        steps:
            - keeper/env-export:
                  secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_org_api_token
                  var-name: SNYK_API_TOKEN
            - keeper/env-export:
                  secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_org_id
                  var-name: SNYK_ORG_ID
            - keeper/env-export:
                  secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_dockerhub_integration_id
                  var-name: SNYK_INTEGRATION_ID
            - cmd-add-docker-image-in-snyk:
                  docker-image-name: graviteeio/apim-gateway
                  version: << pipeline.parameters.graviteeio_version >>
            - cmd-add-docker-image-in-snyk:
                  docker-image-name: graviteeio/apim-management-api
                  version: << pipeline.parameters.graviteeio_version >>
            - cmd-add-docker-image-in-snyk:
                  docker-image-name: graviteeio/apim-management-ui
                  version: << pipeline.parameters.graviteeio_version >>
            - cmd-add-docker-image-in-snyk:
                  docker-image-name: graviteeio/apim-portal-ui
                  version: << pipeline.parameters.graviteeio_version >>
    job-build:
        executor:
            name: openjdk
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: job-build
            - cmd-prepare-env-var
            - run:
                  name: "Build project"
                  command: |
                      mvn -s .gravitee.settings.xml clean install --no-transfer-progress --update-snapshots -DskipTests -Dskip.validation=true -T 2C -Dbundle=dev
                      mkdir -p ./rest-api-docker-context/distribution && cp -r ./gravitee-apim-rest-api/gravitee-apim-rest-api-standalone/gravitee-apim-rest-api-standalone-distribution/target/distribution ./rest-api-docker-context/.
                      mkdir -p ./gateway-docker-context/distribution && cp -r ./gravitee-apim-gateway/gravitee-apim-gateway-standalone/gravitee-apim-gateway-standalone-distribution/target/distribution ./gateway-docker-context/.

            - cmd-notify-on-failure
            - save_cache:
                  paths:
                      - ~/.m2/repository/io/gravitee/apim
                  key: gravitee-api-management-v9-build-apim-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
                  when: on_success
            - cmd-save-maven-job-cache:
                  jobName: job-build
            - persist_to_workspace:
                  root: ./
                  paths:
                      - ./gravitee-*/*/target/*
                      - ./gravitee-apim-rest-api/gravitee-apim-rest-api-management/gravitee-apim-rest-api-management-rest/target/classes/console-openapi.*
                      - ./rest-api-docker-context
                      - ./gateway-docker-context

    job-build-images:
        executor:
            name: openjdk
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-prepare-env-var
            - cmd-get-apim-version
            - cmd-get-apim-tag
            - setup_remote_docker
            - cmd-create-docker-context
            - cmd-docker-azure-login
            - run:
                  name: Build rest api and gateway docker images
                  command: |
                      docker buildx build --push --platform=linux/arm64,linux/amd64 -f gravitee-apim-rest-api/docker/Dockerfile \
                      -t graviteeio.azurecr.io/apim-management-api:$TAG \
                      rest-api-docker-context

                      docker buildx build --push --platform=linux/arm64,linux/amd64 -f gravitee-apim-gateway/docker/Dockerfile \
                      -t graviteeio.azurecr.io/apim-gateway:$TAG \
                      gateway-docker-context
            - when:
                  condition:
                      matches: { pattern: "^(\\d+\\.\\d+\\.x)|master$", value: << pipeline.git.branch >> }
                  steps:
                      - keeper/env-export:
                            secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_org_api_token
                            var-name: SNYK_API_TOKEN
                      - keeper/env-export:
                            secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_org_id
                            var-name: SNYK_ORG_ID
                      - keeper/env-export:
                            secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_acr_integration_id
                            var-name: SNYK_INTEGRATION_ID
                      - cmd-add-docker-image-in-snyk:
                            docker-image-name: apim-management-api
                            version: $TAG
                      - cmd-add-docker-image-in-snyk:
                            docker-image-name: apim-gateway
                            version: $TAG
            - cmd-docker-azure-logout

    job-community-build:
        executor:
            name: openjdk
            version: "17.0"
        steps:
            - checkout
            - cmd-restore-maven-job-cache:
                  jobName: community-build
            - run:
                  name: "Build project"
                  command: |
                      mvn clean install --no-transfer-progress --update-snapshots -DskipTests -Dskip.validation=true -T 2C
            - cmd-notify-on-failure
            - run:
                  name: "Exclude APIM artefacts from build cache"
                  command: |
                      rm -rf ~/.m2/repository/io/gravitee/apim
            - cmd-save-maven-job-cache:
                  jobName: community-build

    job-test:
        executor:
            name: openjdk
            class: medium+
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: job-test
            - restore_cache:
                  keys:
                      - gravitee-api-management-v9-build-apim-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
            - run:
                  name: Run tests
                  command: |
                      mvn --fail-fast -s .gravitee.settings.xml test --no-transfer-progress -Dmain-modules -Dskip.validation=true -T 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - cmd-notify-on-failure
            - cmd-save-maven-job-cache:
                  jobName: job-test
            - store_test_results:
                  path: ~/test-results
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-gateway/gravitee-apim-gateway-coverage/target/site/jacoco-aggregate/
                      - gravitee-apim-rest-api/gravitee-apim-rest-api-coverage/target/site/jacoco-aggregate/
                      - gravitee-apim-definition/gravitee-apim-definition-coverage/target/site/jacoco-aggregate/

    job-test-plugin:
        executor:
            name: ubuntu
            class: medium
        steps:
            - install-jdk-17-for-machine
            - checkout
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: test-plugin
            - restore_cache:
                  keys:
                      - gravitee-api-management-v9-build-apim-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
            - run:
                  name: Run tests
                  command: |
                      mvn --fail-fast -s .gravitee.settings.xml test --no-transfer-progress -Dplugin-modules -Dskip.validation=true -T 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - cmd-notify-on-failure
            - cmd-save-maven-job-cache:
                  jobName: test-plugin
            - store_test_results:
                  path: ~/test-results
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-plugin/gravitee-apim-plugin-coverage/target/site/jacoco-aggregate/

    job-test-integration:
        executor:
            name: openjdk
            class: medium+
        parallelism: 2
        steps:
            - setup_remote_docker
            - checkout
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: test-integration
            - restore_cache:
                  keys:
                      - gravitee-api-management-v9-build-apim-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
            - run:
                  name: "Setup Environment Variables"
                  command: |
                      echo "export TESTCONTAINERS_HOST_OVERRIDE=localhost" >> $BASH_ENV
            - run:
                  name: "Testcontainers tunnel"
                  background: true
                  command: ".circleci/autoforward.py"
            - run:
                  name: Run tests
                  command: |
                      cd gravitee-apim-integration-tests
                      # List all tests
                      circleci tests glob "src/test/java/**/*Test.java" | sed -e 's#^src/test/java/\(.*\)\.java#\1#' | tr "/" "." > all-tests

                      # List all tests to run on this executor
                      cat all-tests | circleci tests split --split-by=timings --timings-type=classname --time-default=10s > tests-to-run

                      # Compute exclusion list (use grep to invert the include list to an exclude list)
                      cat all-tests | grep -xvf tests-to-run > ignore_list

                      # Add * add the end of each line of ignore_list to also exclude all inner classes
                      sed -i 's/$/*/' ignore_list 

                      # Display tests to run on this executor
                      echo "Following test files will run on this executor:"
                      cat tests-to-run
                    
                    # Run tests with rerunFailingTestsCount=2 because some integration tests related to RabbitMQ or Websocket are randomly failing on the CI             
                    mvn --fail-fast -s ../.gravitee.settings.xml test --no-transfer-progress -Dskip.validation=true -Dsurefire.excludesFile=ignore_list -Dsurefire.rerunFailingTestsCount=2
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - cmd-notify-on-failure
            - cmd-save-maven-job-cache:
                  jobName: test-integration
            - store_test_results:
                  path: ~/test-results

    job-test-repository:
        executor:
            name: ubuntu
            class: large
        steps:
            - install-jdk-17-for-machine
            - checkout
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: job-test-repository
            - restore_cache:
                  keys:
                      - gravitee-api-management-v9-build-apim-{{ .Environment.CIRCLE_WORKFLOW_WORKSPACE_ID }}
            - run:
                  name: Run tests
                  command: |
                      # Need to use `verify` phase to get repo-test's jar build and shared to mongodb and jdbc repos 
                      # and then collect and merge all coverage reports
                      mvn -s .gravitee.settings.xml verify --no-transfer-progress -Drepository-modules -Dskip.validation=true -T 2C
            - run:
                  name: Save test results
                  command: |
                      mkdir -p ~/test-results/junit/
                      find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                  when: always
            - cmd-notify-on-failure
            - cmd-save-maven-job-cache:
                  jobName: job-test-repository
            - store_test_results:
                  path: ~/test-results
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-repository/gravitee-apim-repository-coverage/target/site/jacoco-aggregate/

    job-publish-on-artifactory:
        executor:
            name: openjdk
            class: large
        environment:
            ALT_DEPLOYMENT_REPOSITORY: "artifactory-gravitee::default::https://odbxikk7vo-artifactory.services.clever-cloud.com/gravitee-snapshots"
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: job-publish-on-artifactory
            - run:
                  name: "Maven Package and deploy to Artifactory ([gravitee-snapshots] repository)"
                  command: |
                      mvn deploy --no-transfer-progress -DskipTests -Dskip.validation=true -T 2C -s .gravitee.settings.xml   -DaltDeploymentRepository=${ALT_DEPLOYMENT_REPOSITORY} -U
            - cmd-notify-on-failure
            - cmd-save-maven-job-cache:
                  jobName: job-publish-on-artifactory

    job-publish-on-nexus:
        executor:
            name: openjdk
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: job-publish-on-nexus
            - run:
                  name: "Maven Package and deploy to Nexus Snapshots"
                  command: |
                      mvn deploy --no-transfer-progress -DskipTests -Dskip.validation=true -T 2C -s .gravitee.settings.xml -U
            - cmd-notify-on-failure
            - cmd-save-maven-job-cache:
                  jobName: job-publish-on-nexus

    job-e2e-generate-sdk:
        executor:
            name: openjdk
            with_node: true
            class: small
        steps:
            - checkout
            - cmd-webui-install:
                  apim-ui-project: gravitee-apim-e2e
            - attach_workspace:
                  at: .
            - run:
                  name: Generate e2e tests SDK
                  command: |
                      npm run update:sdk:management
                      npm run update:sdk:management:v2
                      npm run update:sdk:portal
                  working_directory: gravitee-apim-e2e
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-e2e/lib/management-webclient-sdk
                      - gravitee-apim-e2e/lib/management-v2-webclient-sdk
                      - gravitee-apim-e2e/lib/portal-webclient-sdk
            - cmd-notify-on-failure

    job-e2e-lint-build:
        executor:
            name: node-lts
            class: medium
        steps:
            - checkout
            - cmd-webui-install:
                  apim-ui-project: gravitee-apim-e2e
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: gravitee-apim-e2e
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: gravitee-apim-e2e
            - run:
                  name: Build
                  command: npm run build
                  working_directory: gravitee-apim-e2e
            - cmd-notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-e2e/dist
                      - gravitee-apim-e2e/node_modules

    job-perf-lint-build:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - cmd-webui-install:
                  apim-ui-project: gravitee-apim-perf
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: gravitee-apim-perf
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: gravitee-apim-perf
            - run:
                  name: Build
                  command: npm run build
                  working_directory: gravitee-apim-perf
            - cmd-notify-on-failure

    job-webui-lint-test:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            resource-class:
                type: string
                default: medium
        executor:
            name: node-lts
            class: << parameters.resource-class>>
        steps:
            - checkout
            - cmd-webui-install:
                  apim-ui-project: << parameters.apim-ui-project >>
            - attach_workspace:
                  at: .
            - run:
                  name: Check License
                  command: npm run lint:license
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Run Prettier and ESLint
                  command: npm run lint
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Run unit tests
                  command: npm run test:coverage
                  working_directory: << parameters.apim-ui-project >>
            - cmd-notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/coverage
            - store_test_results:
                  path: << parameters.apim-ui-project >>/coverage

    job-webui-publish-artifactory:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
        executor:
            name: node-lts
            class: small
        environment:
            ARTIFACTORY_URL: "https://odbxikk7vo-artifactory.services.clever-cloud.com"
        steps:
            - attach_workspace:
                  at: .
            - cmd-get-apim-version
            - keeper/env-export:
                  secret-url: keeper://R7NuqoW0KD-8l-kjx0-PgQ/field/login
                  var-name: ARTIFACTORY_USER
            - keeper/env-export:
                  secret-url: keeper://R7NuqoW0KD-8l-kjx0-PgQ/field/password
                  var-name: ARTIFACTORY_API_KEY
            - artifactory-orb/install
            - artifactory-orb/configure
            - run:
                  name: Update Build version
                  command: |
                      sed -i "s/-SNAPSHOT//" dist/build.json
                  working_directory: << parameters.apim-ui-project >>
            - run:
                  name: Rename and zip dist folder
                  command: mv dist << parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT} && zip -r dist.zip << parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}
                  working_directory: << parameters.apim-ui-project >>
            - when:
                  condition: << pipeline.parameters.dry_run>>
                  steps:
                      - artifactory-orb/upload:
                            source: << parameters.apim-ui-project >>/dist.zip
                            target: dry-run-releases/io/gravitee/apim/ui/<< parameters.apim-ui-project >>/${APIM_VERSION%-SNAPSHOT}/<< parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}.zip
            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - artifactory-orb/upload:
                            source: << parameters.apim-ui-project >>/dist.zip
                            target: gravitee-releases/io/gravitee/apim/ui/<< parameters.apim-ui-project >>/${APIM_VERSION%-SNAPSHOT}/<< parameters.apim-ui-project >>-${APIM_VERSION%-SNAPSHOT}.zip
            - cmd-notify-on-failure

    job-webui-build:
        parameters:
            apim-ui-project:
                type: string
                default: ""
                description: the name of the UI project to build
            docker-image-name:
                type: string
                default: ""
                description: the name of the image
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-get-apim-version
            - setup_remote_docker
            - cmd-webui-install:
                  apim-ui-project: << parameters.apim-ui-project >>
            - run:
                  name: Update Build version
                  command: |
                      sed -i -E "s/\"version\": \"(.*)\"/\"version\": \"${APIM_VERSION}\"/" << parameters.apim-ui-project >>/build.json
            - run:
                  name: Build
                  command: npm run build:prod
                  environment:
                      NODE_OPTIONS: --max_old_space_size=4086
                  working_directory: << parameters.apim-ui-project >>
            - cmd-build-ui-image:
                  docker-image-name: << parameters.docker-image-name >>
                  apim-ui-project: << parameters.apim-ui-project >>
            - cmd-notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - << parameters.apim-ui-project >>/dist

    job-console-webui-build-storybook:
        executor:
            name: node-lts
            class: large
        steps:
            - checkout
            - cmd-webui-install:
                  apim-ui-project: gravitee-apim-console-webui
            - run:
                  name: Build
                  command: npm run build-storybook
                  working_directory: gravitee-apim-console-webui
                  environment:
                      NODE_OPTIONS: --max_old_space_size=8192
            - cmd-notify-on-failure
            - persist_to_workspace:
                  root: .
                  paths:
                      - gravitee-apim-console-webui/storybook-static

    job-console-webui-chromatic-deployment:
        executor:
            class: small
            name: node-lts
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-webui-install:
                  apim-ui-project: gravitee-apim-console-webui
            - keeper/env-export:
                  secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
                  var-name: GITHUB_TOKEN
            - keeper/env-export:
                  secret-url: keeper://Hp1bFl5s0doxnQgqkMdCdg/field/password
                  var-name: CHROMATIC_PROJECT_TOKEN
            - run:
                  name: Running Chromatic
                  # TODO:
                  #  - Handle npx chromatic command failure, make the job fails
                  #  - Create a new project in Chromatic and update the token
                  command: |
                      SB_URL=$(cd gravitee-apim-console-webui && npx chromatic --project-token=$CHROMATIC_PROJECT_TOKEN --exit-once-uploaded -d=storybook-static | grep -o "View your Storybook at https:\/\/[0-9a-z-]*\.chromatic\.com" | grep -o "https:.*")
                      echo "export SB_URL=$SB_URL" >> $BASH_ENV
            - gh/setup
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi

                      export PR_BODY_STORYBOOK_SECTION="
                      <!-- Storybook placeholder -->
                      ---

                      📚&nbsp;&nbsp;View the storybook of this branch [here](${SB_URL})
                      <!-- Storybook placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/Storybook placeholder -->/,/Storybook placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_STORYBOOK_SECTION"
            - cmd-notify-on-failure

    job-purge-master-azure-registry:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - run:
                  name: 🗑 Let's purge all master Apim images older than 1d
                  # TODO:
                  #  - Improve purge of other images and branches
                  command: |
                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az acr run --cmd "acr purge --filter 'apim-management-ui:master-.*' --untagged --ago 1d --keep 3" --registry graviteeio /dev/null
            - cmd-notify-on-failure

    job-deploy-on-azure-cluster:
        executor:
            name: azure-cli
            resource_class: small
        steps:
            - attach_workspace:
                  at: .
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/login
                  var-name: AZURE_APPLICATION_ID
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/custom_field/tenant
                  var-name: AZURE_TENANT
            - keeper/env-export:
                  secret-url: keeper://UryantA7MvZe8fkWwcUt8g/field/password
                  var-name: AZURE_APPLICATION_SECRET
            - run:
                  name: Install Kubectl
                  command: |
                      curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                      chmod +x ./kubectl
                      mv ./kubectl /usr/local/bin/kubectl
                      kubectl version --client=true
            - run:
                  name: Rollout pods on "gravitee-devs-preprod-aks-cluster"
                  command: |
                      export K8S_NAMESPACE=apim-apim-${CIRCLE_BRANCH//\./-}

                      az login --service-principal -u $AZURE_APPLICATION_ID --tenant $AZURE_TENANT -p $AZURE_APPLICATION_SECRET
                      az aks get-credentials --admin --resource-group Devs-Preprod-Hosted --name gravitee-devs-preprod-aks-cluster

                      kubectl rollout restart deployment/${K8S_NAMESPACE}-api -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAMESPACE}-portal -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAMESPACE}-ui -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAMESPACE}-gateway -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAMESPACE}-bridge-client-gateway -n ${K8S_NAMESPACE}
                      kubectl rollout restart deployment/${K8S_NAMESPACE}-ingress-gateway -n ${K8S_NAMESPACE}
                      # TODO: Handle CE environments
                      if [ "${CIRCLE_BRANCH}" == "master" ]; then
                        kubectl rollout restart deployment apim-apim-master-ce-apim-ce-api -n apim-apim-master-ce
                        kubectl rollout restart deployment apim-apim-master-ce-apim-ce-ui -n apim-apim-master-ce
                      fi
            - keeper/env-export:
                  secret-url: keeper://G4hBnFUDBYb9Sw3TxhvjHg/custom_field/token
                  var-name: CIRCLE_TOKEN
            - run:
                  name: Rollout pods on "gravitee-apim-preprod-aks-cluster"
                  command: |
                      curl --request POST \
                      --url https://circleci.com/api/v2/project/gh/gravitee-io/cloud-apim/pipeline \
                      --header "Circle-Token: ${CIRCLE_TOKEN}" \
                      --header "content-type: application/json" \
                      --data '{"branch":"hprod-geckos","parameters":{"command-name":"k8s-rollout-all"}}'
            - cmd-notify-on-failure

    ## Release Jobs
    job-slack-announcement:
        parameters:
            message:
                type: string
                default: ""
        docker:
            - image: cimg/base:stable
        resource_class: small
        steps:
            - keeper/env-export:
                  secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
                  var-name: SLACK_ACCESS_TOKEN
            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - slack/notify:
                            channel: C02NGT20S4W
                            event: always
                            custom: |
                                {
                                  "blocks": [
                                    {
                                      "type": "section",
                                      "text": {
                                        "type": "mrkdwn",
                                        "text": "<< parameters.message >>"
                                      }
                                    }
                                  ]
                                }

    job-backend-build-and-publish-artifactory:
        executor:
            name: openjdk
            class: large
        steps:
            - checkout
            - cmd-restore-maven-job-cache:
                  jobName: release
            - attach_workspace:
                  at: .
            - cmd-restore-maven-job-cache:
                  jobName: job-backend-build-and-publish-artifactory
            - run:
                  name: Remove `-SNAPSHOT` from versions
                  command: |
                      mvn -B versions:set -DremoveSnapshot=true -DgenerateBackupPoms=false
                      sed -i "s#<changelist>.*</changelist>#<changelist></changelist>#" pom.xml

            - cmd-prepare-gpg
            - cmd-prepare-env-var
            - run:
                  name: Maven deploy to Gravitee's private Artifactory
                  command: |
                      mvn --settings .gravitee.settings.xml -B -U -P all-modules,gio-artifactory-release,gio-release clean deploy -DskipTests=true -Dskip.validation -T 4 --no-transfer-progress
            - cmd-save-maven-job-cache:
                  jobName: job-backend-build-and-publish-artifactory

    job-release-commit-and-prepare-next-version:
        docker:
            - image: cimg/base:stable
        resource_class: medium
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - add_ssh_keys:
                  fingerprints:
                      - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
            - keeper/env-export:
                  secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/field/login
                  var-name: GIT_USER_NAME
            - keeper/env-export:
                  secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/custom_field/email
                  var-name: GIT_USER_EMAIL
            - run:
                  name: Git config
                  command: |
                      git config --global user.name "${GIT_USER_NAME}"
                      git config --global user.email "${GIT_USER_EMAIL}"
            - cmd-parse-gravitee-version:
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
            - run:
                  name: Git release <<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
                  command: |
                      # Remove `-SNAPSHOT` from source
                      # Backend
                      sed -i "s#<changelist>.*</changelist>#<changelist></changelist>#" pom.xml

                      # UI
                      sed -i "s#\"version\": \".*\"#\"version\": \"${GRAVITEEIO_VERSION_WITH_QUALIFIER}\"#" gravitee-apim-console-webui/build.json
                      sed -i "s#\"version\": \".*\"#\"version\": \"${GRAVITEEIO_VERSION_WITH_QUALIFIER}\"#" gravitee-apim-portal-webui/build.json

                      # Helm chart
                      sed "0,/version.*/s/version.*/version: ${GRAVITEEIO_VERSION_WITH_QUALIFIER}/" -i helm/Chart.yaml

                      git add --update
                      git commit -m "${GRAVITEEIO_VERSION_WITH_QUALIFIER}"
                      git tag ${GRAVITEEIO_VERSION_WITH_QUALIFIER}

                      # If we are on master branch, we need to create the support branch
                      if [ "${CIRCLE_BRANCH}" = "master" ]; then
                        export MAINTENANCE_GIT_BRANCH="${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}.x"

                        git checkout -b ${MAINTENANCE_GIT_BRANCH}
                        
                        # Set the version to the next support version (bump patch version + '-SNAPSHOT')        
                        sed -i "s#<revision>.*</revision>#<revision>${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}.1</revision>#" pom.xml
                        sed -i "s#<changelist>.*</changelist>#<changelist>-SNAPSHOT</changelist>#" pom.xml

                        git add --update
                        git commit -m 'chore: prepare next version [skip ci]'

                        git push -u <<# pipeline.parameters.dry_run >>--dry-run<</ pipeline.parameters.dry_run >> origin ${MAINTENANCE_GIT_BRANCH}

                        git checkout ${CIRCLE_BRANCH}
                      fi

                      # Set the version to the next version (bump patch version + '-SNAPSHOT')
                      if [ "${CIRCLE_BRANCH}" = "master" ]; then
                        export MVN_PRJ_NEXT_VERSION="${MVN_PRJ_VERSION_MAJOR}.$((${MVN_PRJ_VERSION_MINOR}+1)).0"
                        export MVN_PRJ_NEXT_QUALIFIER=""
                      elif [ "${GRAVITEEIO_QUALIFIER}" = "" ]; then
                        export MVN_PRJ_NEXT_VERSION="${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}.$((${GRAVITEEIO_VERSION_PATCH}+1))"
                        export MVN_PRJ_NEXT_QUALIFIER=""
                      else
                        export MVN_PRJ_NEXT_VERSION="${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}.${GRAVITEEIO_VERSION_PATCH}"
                        export MVN_PRJ_NEXT_QUALIFIER="-${GRAVITEEIO_QUALIFIER_NAME}.$((${GRAVITEEIO_QUALIFIER_VERSION}+1))"
                      fi;

                      sed -i "s#<revision>.*</revision>#<revision>${MVN_PRJ_NEXT_VERSION}</revision>#" pom.xml                   
                      sed -i "s#<changelist>.*</changelist>#<changelist>-SNAPSHOT</changelist>#" pom.xml
                      sed -i "s#<sha1>.*</sha1>#<sha1>${MVN_PRJ_NEXT_QUALIFIER}</sha1>#" pom.xml

                      sed -i "s#version: \".*\"#version: \"${MVN_PRJ_NEXT_VERSION}${MVN_PRJ_NEXT_QUALIFIER}-SNAPSHOT\"#" gravitee-apim-rest-api/gravitee-apim-rest-api-portal/gravitee-apim-rest-api-portal-rest/src/main/resources/portal-openapi.yaml
                      sed -i "s#\"version\": \".*\"#\"version\": \"${MVN_PRJ_NEXT_VERSION}${MVN_PRJ_NEXT_QUALIFIER}-SNAPSHOT\"#" gravitee-apim-console-webui/build.json
                      sed -i "s#\"version\": \".*\"#\"version\": \"${MVN_PRJ_NEXT_VERSION}${MVN_PRJ_NEXT_QUALIFIER}-SNAPSHOT\"#" gravitee-apim-portal-webui/build.json

                      git add --update
                      git commit -m 'chore: prepare next version [skip ci]'

                      git push -u <<# pipeline.parameters.dry_run >>--dry-run<</ pipeline.parameters.dry_run >> origin ${CIRCLE_BRANCH}
                      git push --tags <<# pipeline.parameters.dry_run >>--dry-run<</ pipeline.parameters.dry_run >> origin ${CIRCLE_BRANCH}

    job-publish-prod-docker-images:
        parameters:
            dry_run:
                default: true
                type: boolean
            docker_tag_as_latest:
                default: false
                type: boolean
            graviteeio_version:
                default: ""
                type: string
        docker:
            - image: cimg/base:stable
        steps:
            - setup_remote_docker
            - checkout
            - keeper/env-export:
                  secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/login
                  var-name: DOCKERHUB_BOT_USER_NAME
            - keeper/env-export:
                  secret-url: keeper://cooU9UoXIk8Kj0hsP2rkBw/field/password
                  var-name: DOCKERHUB_BOT_USER_TOKEN
            - cmd-parse-gravitee-version:
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
            - cmd-create-docker-context
            - run:
                  name: "Build & Publish Gravitee.io APIM Docker images"
                  command: |
                      # Determine download URL
                      if [ "${GRAVITEEIO_QUALIFIER}" != "" ]; then
                          export TARGET_FOLDER="/pre-releases/graviteeio-apim"
                      else
                          export TARGET_FOLDER="/graviteeio-apim"
                      fi;
                      if [ "<< parameters.dry_run >>" = "false" ]; then
                          export DOWNLOAD_HOST="https://download.gravitee.io"
                      else
                          export DOWNLOAD_HOST="https://gravitee-dry-releases-downloads.cellar-c2.services.clever-cloud.com"
                      fi;


                      export DOCKER_TAG_SUFFIX=""
                      export DOCKER_BUILD_ARGS="--build-arg GRAVITEEIO_VERSION=${GRAVITEEIO_VERSION_WITH_QUALIFIER} --build-arg GRAVITEEIO_DOWNLOAD_URL=${DOWNLOAD_HOST}${TARGET_FOLDER}"

                      # always create a tag with the full version. If the qualifier is empty then GRAVITEEIO_VERSION will be the same as GRAVITEEIO_VERSION_WITH_QUALIFIER
                      export DOCKER_BUILD_GATEWAY_TAG="       -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_WITH_QUALIFIER}"
                      export DOCKER_BUILD_MANAGEMENT_API_TAG="-t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_WITH_QUALIFIER}"
                      export DOCKER_BUILD_MANAGEMENT_UI_TAG=" -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_WITH_QUALIFIER}"
                      export DOCKER_BUILD_PORTAL_UI_TAG="     -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_WITH_QUALIFIER}"

                      # create x.y.z-qualifer tags only if there is a qualifier
                      if [ "${GRAVITEEIO_QUALIFIER}" != "" ]; then
                        DOCKER_BUILD_GATEWAY_TAG+="        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION}-${GRAVITEEIO_QUALIFIER_NAME}"
                        DOCKER_BUILD_MANAGEMENT_API_TAG+=" -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION}-${GRAVITEEIO_QUALIFIER_NAME}"
                        DOCKER_BUILD_MANAGEMENT_UI_TAG+="  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION}-${GRAVITEEIO_QUALIFIER_NAME}"
                        DOCKER_BUILD_PORTAL_UI_TAG+="      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION}-${GRAVITEEIO_QUALIFIER_NAME}"
                      else
                        # create x.y tags only if there is no qualifier
                        DOCKER_BUILD_GATEWAY_TAG+="        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}"
                        DOCKER_BUILD_MANAGEMENT_API_TAG+=" -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}"
                        DOCKER_BUILD_MANAGEMENT_UI_TAG+="  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}"
                        DOCKER_BUILD_PORTAL_UI_TAG+="      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_MAJOR}.${GRAVITEEIO_VERSION_MINOR}"

                        #  create x and latest tags only if it's the latest version and there is no qualifier
                        if [ "<< parameters.docker_tag_as_latest >>" = "true" ]; then
                          DOCKER_BUILD_GATEWAY_TAG+="        -t graviteeio/apim-gateway:${GRAVITEEIO_VERSION_MAJOR}           -t graviteeio/apim-gateway:latest"
                          DOCKER_BUILD_MANAGEMENT_API_TAG+=" -t graviteeio/apim-management-api:${GRAVITEEIO_VERSION_MAJOR}    -t graviteeio/apim-management-api:latest"
                          DOCKER_BUILD_MANAGEMENT_UI_TAG+="  -t graviteeio/apim-management-ui:${GRAVITEEIO_VERSION_MAJOR}     -t graviteeio/apim-management-ui:latest"
                          DOCKER_BUILD_PORTAL_UI_TAG+="      -t graviteeio/apim-portal-ui:${GRAVITEEIO_VERSION_MAJOR}         -t graviteeio/apim-portal-ui:latest"
                        fi
                      fi

                      if [ "<< parameters.dry_run >>" = "false" ]; then
                        docker login --username="${DOCKERHUB_BOT_USER_NAME}" -p="${DOCKERHUB_BOT_USER_TOKEN}"

                        docker buildx build --push --platform=linux/arm64,linux/amd64 ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_GATEWAY_TAG}         -f ./gravitee-apim-gateway/docker/Dockerfile-from-download ./gravitee-apim-gateway/docker
                        docker buildx build --push --platform=linux/arm64,linux/amd64 ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_MANAGEMENT_API_TAG}  -f ./gravitee-apim-rest-api/docker/Dockerfile-from-download ./gravitee-apim-rest-api/docker
                        docker buildx build --push --platform=linux/arm64,linux/amd64 ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_MANAGEMENT_UI_TAG}   -f ./gravitee-apim-console-webui/docker/Dockerfile-from-download ./gravitee-apim-console-webui/docker
                        docker buildx build --push --platform=linux/arm64,linux/amd64 ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_PORTAL_UI_TAG}       -f ./gravitee-apim-portal-webui/docker/Dockerfile-from-download ./gravitee-apim-portal-webui/docker

                        docker logout
                      else
                        echo "DRY RUN Mode. Build only"
                        docker buildx build --platform=linux/arm64,linux/amd64 ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_GATEWAY_TAG}         -f ./gravitee-apim-gateway/docker/Dockerfile-from-download ./gravitee-apim-gateway/docker
                        docker buildx build --platform=linux/arm64,linux/amd64 ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_MANAGEMENT_API_TAG}  -f ./gravitee-apim-rest-api/docker/Dockerfile-from-download ./gravitee-apim-rest-api/docker
                        docker buildx build --platform=linux/arm64,linux/amd64 ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_MANAGEMENT_UI_TAG}   -f ./gravitee-apim-console-webui/docker/Dockerfile-from-download ./gravitee-apim-console-webui/docker
                        docker buildx build --platform=linux/arm64,linux/amd64 ${DOCKER_BUILD_ARGS} --quiet ${DOCKER_BUILD_PORTAL_UI_TAG}       -f ./gravitee-apim-portal-webui/docker/Dockerfile-from-download ./gravitee-apim-portal-webui/docker
                      fi

    job-nexus-staging:
        executor:
            name: openjdk
            version: "11.0"
            class: xlarge
        steps:
            - checkout
            - run:
                  name: Checkout tag << pipeline.parameters.graviteeio_version >>
                  command: |
                      git checkout << pipeline.parameters.graviteeio_version >>
            - run:
                  name: Create .apim-version file for cache
                  command: |
                      echo "<< pipeline.parameters.graviteeio_version >>-SNAPSHOT" > .apim-version.txt

            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - cmd-restore-maven-job-cache:
                            jobName: job-nexus-staging
                      - attach_workspace:
                            at: .
                      - cmd-prepare-gpg
                      - run:
                            name: Release on Nexus
                            command: |
                                mvn clean deploy --activate-profiles gravitee-release --batch-mode -Dmaven.test.skip=true -DskipTests -Dskip.validation=true --settings .gravitee.settings.xml --update-snapshots
                      - cmd-save-maven-job-cache:
                            jobName: job-nexus-staging
                      - keeper/env-export:
                            secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
                            var-name: SLACK_ACCESS_TOKEN

    job-jdbc-test-container:
        parameters:
            version:
                type: string
                description: type and version of the database to test
                default: ""
        executor:
            name: ubuntu
            class: medium
            with_docker_layer_caching: true
        steps:
            - when:
                  condition: << parameters.version >>
                  steps:
                      - install-jdk-17-for-machine
                      - checkout
                      - attach_workspace:
                            at: .
                      - cmd-restore-maven-job-cache:
                            jobName: job-jdbc-test-container
                      - run:
                            name: Run tests
                            command: |
                                cd gravitee-apim-repository
                                mvn -pl 'gravitee-apim-repository-jdbc' -am -s ../.gravitee.settings.xml clean package --no-transfer-progress -Dskip.validation=true -DjdbcType=<< parameters.version>> -T 2C
                      - run:
                            name: Save test results
                            command: |
                                mkdir -p ~/test-results/junit/
                                find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                            when: always
                      - cmd-save-maven-job-cache:
                            jobName: job-jdbc-test-container
                      - store_test_results:
                            path: ~/test-results
                      - cmd-notify-on-failure
            - when:
                  condition:
                      not: << parameters.version >>
                  steps:
                      - run:
                            name: Version not set - nothing to run
                            command: exit 0

    job-mongo-test-container:
        parameters:
            version:
                type: string
                description: version of the database to test
                default: ""
        executor:
            name: ubuntu
        steps:
            - when:
                  condition: << parameters.version >>
                  steps:
                      - install-jdk-17-for-machine
                      - checkout
                      - attach_workspace:
                            at: .
                      - cmd-restore-maven-job-cache:
                            jobName: job-mongo-test-container
                      - run:
                            name: Run repository tests with MongoDB << parameters.version >>
                            command: |
                                cd gravitee-apim-repository
                                mvn -pl 'gravitee-apim-repository-mongodb' -am -s ../.gravitee.settings.xml clean package --no-transfer-progress -Dskip.validation=true -DmongoVersion=<< parameters.version>> -T 2C
                      - run:
                            name: Save test results
                            command: |
                                mkdir -p ~/test-results/junit/
                                find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                            when: always
                      - cmd-save-maven-job-cache:
                            jobName: job-mongo-test-container
                      - store_test_results:
                            path: ~/test-results
                      - cmd-notify-on-failure
            - when:
                  condition:
                      not: << parameters.version >>
                  steps:
                      - run:
                            name: Version not set - nothing to run
                            command: exit 0

    job-elastic-test-container:
        parameters:
            version:
                type: string
                description: version of elasticsearch to test
                default: ""
            engineType:
                type: string
                description: type of the search engine
                default: "elasticsearch"
        executor:
            name: ubuntu
        steps:
            - when:
                  condition: << parameters.version >>
                  steps:
                      - install-jdk-17-for-machine
                      - checkout
                      - attach_workspace:
                            at: .
                      - cmd-restore-maven-job-cache:
                            jobName: job-elastic-test-container
                      - run:
                            name: Run Elasticsearch repository tests with version << parameters.version >>
                            command: |
                                cd gravitee-apim-repository
                                mvn -pl 'gravitee-apim-repository-elasticsearch' -am -s ../.gravitee.settings.xml clean package --no-transfer-progress -Dskip.validation=true -D<< parameters.engineType >>.version=<< parameters.version >> -Dsearch.type=<< parameters.engineType >> -T 2C
                      - run:
                            name: Save test results
                            command: |
                                mkdir -p ~/test-results/junit/
                                find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                            when: always
                      - cmd-save-maven-job-cache:
                            jobName: job-elastic-test-container
                      - store_test_results:
                            path: ~/test-results
                      - cmd-notify-on-failure
            - when:
                  condition:
                      not: << parameters.version >>
                  steps:
                      - run:
                            name: Version not set - nothing to run
                            command: exit 0

    job-redis-repository-test-container:
        parameters:
            version:
                type: string
                description: version of Redis to run the test against
                default: ""
        executor:
            name: ubuntu
        steps:
            - when:
                  condition: << parameters.version >>
                  steps:
                      - install-jdk-17-for-machine
                      - checkout
                      - attach_workspace:
                            at: .
                      - cmd-restore-maven-job-cache:
                            jobName: job-redis-test-container
                      - run:
                            name: Run Redis repository tests with version << parameters.version >>
                            command: |
                                cd gravitee-apim-repository
                                mvn -pl 'gravitee-apim-repository-redis' -am -s ../.gravitee.settings.xml clean package --no-transfer-progress -Dskip.validation=true -DredisVersion=<< parameters.version >>
                      - run:
                            name: Save test results
                            command: |
                                mkdir -p ~/test-results/junit/
                                find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
                            when: always
                      - cmd-save-maven-job-cache:
                            jobName: job-redis-test-container
                      - store_test_results:
                            path: ~/test-results
                      - cmd-notify-on-failure
            - when:
                  condition:
                      not: << parameters.version >>
                  steps:
                      - run:
                            name: Version not set - nothing to run
                            command: exit 0

    job-e2e-test:
        executor:
            name: ubuntu
            class: medium
        parameters:
            execution_mode:
                type: string
            database:
                type: string
            apim_client_tag:
                type: string
                default: ""
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-get-apim-tag
            - cmd-docker-azure-login
            - keeper/env-export:
                  secret-url: keeper://w8WBpALVCgYdxtV5pVrQsw/custom_field/base64
                  var-name: GRAVITEE_LICENSE
            - run:
                  name: Run API & E2E Tests
                  command: |
                      echo "Running API & E2E tests in << parameters.execution_mode >> mode with << parameters.database >> database"
                      cd gravitee-apim-e2e
                      if [ "<< parameters.execution_mode >>" = "v3" ]
                      then
                        echo "Disable v4 emulation engine on APIM Gateway and Rest API"
                        export V4_EMULATION_ENGINE_DEFAULT=no
                      fi
                      if [ -z "<< parameters.apim_client_tag >>" ]
                      then
                        APIM_REGISTRY=graviteeio.azurecr.io APIM_TAG=$TAG APIM_CLIENT_TAG=$TAG npm run test:api:<< parameters.database >>
                      else 
                        APIM_REGISTRY=graviteeio.azurecr.io APIM_TAG=$TAG APIM_CLIENT_TAG=<< parameters.apim_client_tag >> npm run test:api:<< parameters.database >>
                      fi
            - cmd-docker-azure-logout
            - when:
                  condition:
                      and:
                          - equal: [v3, << parameters.execution_mode >>]
                          - equal: [mongo, << parameters.database >>]
                  steps:
                      - persist_to_workspace:
                            root: .
                            paths:
                                - .git
                                - gravitee-apim-gateway
                                - gravitee-apim-rest-api
                                - rest-api-docker-context
                                - gateway-docker-context
                                - gravitee-api-management
                                - gravitee-apim-e2e/package.json
            - cmd-notify-on-failure
            - store_test_results:
                  path: ./gravitee-apim-e2e/.tmp/e2e-test-report.xml
            - store_artifacts:
                  path: ./gravitee-apim-e2e/.tmp/e2e-test-report.xml
            - store_artifacts:
                  path: ./gravitee-apim-e2e/.logs

    job-e2e-cypress:
        executor:
            name: ubuntu
            class: large
        steps:
            - checkout
            - attach_workspace:
                  at: .
            - cmd-get-apim-tag
            - cmd-docker-azure-login
            - run:
                  name: Run UI tests
                  command: |
                      cd gravitee-apim-e2e
                      echo "Enabling jupiter mode on APIM Gateway and Rest API"
                      export JUPITER_MODE_ENABLED=true
                      APIM_REGISTRY=graviteeio.azurecr.io APIM_TAG=$TAG npm run test:ui
            - cmd-docker-azure-logout
            - cmd-notify-on-failure
            - store_artifacts:
                  path: ./gravitee-apim-e2e/.tmp/screenshots
            - store_artifacts:
                  path: ./gravitee-apim-e2e/.tmp/videos
            - store_artifacts:
                  path: ./gravitee-apim-e2e/.logs

    job-publish-rpm-packages:
        parameters:
            dry_run:
                default: true
                type: boolean
            graviteeio_version:
                type: string
                default: ""
        executor:
            name: ubuntu
        steps:
            - keeper/env-export:
                  secret-url: keeper://8CG6HxY5gYsl-85eJKuIoA/field/password
                  var-name: GIO_PACKAGECLOUD_TOKEN
            - keeper/env-export:
                secret-url: keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/armor_format_pub_key
                var-name: GPG_KEY_PUBLIC
            - keeper/env-export:
                secret-url: keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/armor_format_private_key
                var-name: GPG_KEY_PRIVATE
            - keeper/env-export:
                secret-url: keeper://riW92t8X4tk4ZmQc8-FZ4Q/field/login
                var-name: GPG_KEY_NAME
            - keeper/env-export:
                secret-url: keeper://riW92t8X4tk4ZmQc8-FZ4Q/custom_field/passphrase
                var-name: GPG_KEY_PASSPHRASE
            - run:
                  name: "Building and publishing RPMs"
                  command: |
                      export GIT_GRAVITEE_PACKAGES_REPO=$(mktemp -d)
                      git clone --depth 1 --branch master --single-branch --no-tag git@github.com:gravitee-io/packages.git ${GIT_GRAVITEE_PACKAGES_REPO}
                      
                      cd ${GIT_GRAVITEE_PACKAGES_REPO}/apim/4.x
                      ./build.sh -v << parameters.graviteeio_version >>
          
                      echo "change RPM file owner from root to graviteeio"
                      docker run --rm \
                        -v "${PWD}:/rpms" \
                        --workdir /rpms \
                        --entrypoint /bin/sh \
                        graviteeio/fpm:rpm \
                        -c 'chown 1001:1001 *.rpm'
          
                      docker run --rm \
                        -v "${PWD}:/rpms" \
                        -e "GPG_KEY_NAME" \
                        -e "GPG_KEY_PUBLIC" \
                        -e "GPG_KEY_PRIVATE" \
                        -e "GPG_KEY_PASSPHRASE" \
                        graviteeio/rpmsign
                    
                      publishLocation="$( [ "<< parameters.dry_run >>" == "true" ] && echo "nightly" || echo "rpms" )"
                      
                      echo "RPMs will be published in https://packagecloud.io/graviteeio/${publishLocation}"
                      
                      docker run --rm \
                        -v "${GIT_GRAVITEE_PACKAGES_REPO}/apim/4.x:/packages" \
                        -e PACKAGECLOUD_TOKEN=${GIO_PACKAGECLOUD_TOKEN} \
                        digitalocean/packagecloud \
                        push --yes --skip-errors --verbose "graviteeio/${publishLocation}/el/7" /packages/*.rpm

    job-package-bundle:
        executor:
            name: openjdk
            with_node: true
        environment:
            ARTIFACTORY_REPO_URL: "https://odbxikk7vo-artifactory.services.clever-cloud.com/external-dependencies-n-gravitee-all"
        steps:
            - keeper/env-export:
                  secret-url: keeper://R7NuqoW0KD-8l-kjx0-PgQ/field/login
                  var-name: ARTIFACTORY_USERNAME
            - keeper/env-export:
                  secret-url: keeper://R7NuqoW0KD-8l-kjx0-PgQ/field/password
                  var-name: ARTIFACTORY_PASSWORD
            - checkout
            - run:
                  name: Checkout tag << pipeline.parameters.graviteeio_version >>
                  command: |
                      git checkout << pipeline.parameters.graviteeio_version >>
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: "./release"
            - run:
                  name: "Building package bundle"
                  working_directory: "./release"
                  command: npm run zx -- --quiet --experimental ci-steps/package-bundles.mjs --version=<< pipeline.parameters.graviteeio_version >>
            - keeper/env-export:
                  secret-url: keeper://Mqmplmfu17bDR5XRLmO1mQ/field/password
                  var-name: AWS_ACCESS_KEY_ID
            - keeper/env-export:
                  secret-url: keeper://3-pU56sIqcyWWw7HxhxjaQ/field/password
                  var-name: AWS_SECRET_ACCESS_KEY
            - cmd-parse-gravitee-version:
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
            - run:
                  name: "Determine target bucket"
                  command: |
                      if [ "${GRAVITEEIO_QUALIFIER}" != "" ]; then
                          export TARGET_FOLDER="/pre-releases/graviteeio-apim"
                      else
                          export TARGET_FOLDER="/graviteeio-apim"
                      fi;
                      echo "export TARGET_FOLDER=${TARGET_FOLDER}" >> $BASH_ENV
            - when:
                  condition: << pipeline.parameters.dry_run>>
                  steps:
                      - aws-s3/sync:
                            arguments: |
                                --endpoint-url https://cellar-c2.services.clever-cloud.com \
                                --acl public-read
                            from: ./release/.tmp/<< pipeline.parameters.graviteeio_version >>/dist
                            to: "s3://gravitee-dry-releases-downloads${TARGET_FOLDER}"
            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - aws-s3/sync:
                            arguments: |
                                --endpoint-url https://cellar-c2.services.clever-cloud.com \
                                --acl public-read
                            from: ./release/.tmp/<< pipeline.parameters.graviteeio_version >>/dist
                            to: "s3://gravitee-releases-downloads${TARGET_FOLDER}"

    job-release-notes-apim:
        executor:
            name: node-lts
            class: medium
        environment:
            VERSION: << pipeline.parameters.graviteeio_version >>
        steps:
            - checkout
            - keeper/env-export:
                  secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/field/login
                  var-name: GIT_USER_NAME
            - keeper/env-export:
                  secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/custom_field/email
                  var-name: GIT_USER_EMAIL
            - keeper/env-export:
                  secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
                  var-name: GITHUB_TOKEN
            - keeper/env-export:
                  secret-url: keeper://ZOz4db245GNaETVwmPBk8w/field/password
                  var-name: SLACK_ACCESS_TOKEN
            - keeper/env-export:
                  secret-url: keeper://hfnQD5TEfxzwRXUKhJhM-A/field/password
                  var-name: JIRA_TOKEN
            - add_ssh_keys:
                  fingerprints:
                      - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
            - run:
                  name: Git config
                  command: |
                      git config --global user.name "${GIT_USER_NAME}"
                      git config --global user.email "${GIT_USER_EMAIL}"
            - gh/setup
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: "./release"
            - run:
                  name: "Open a PR to create release notes into docs repository"
                  working_directory: "./release"
                  command: npm run zx -- --quiet ci-steps/generate-changelog.mjs --version=${VERSION}
            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - run:
                            name: Get RELEASE_NOTES_PR_URL
                            command: |
                                echo "export RELEASE_NOTES_PR_URL=$(cat /tmp/releaseNotesPrUrl.txt)" >> $BASH_ENV
                      - slack/notify:
                            channel: C02NGT20S4W
                            event: pass
                            custom: |
                                {
                                  "blocks": [
                                    {
                                      "type": "section",
                                      "text": {
                                        "type": "mrkdwn",
                                        "text": ":memo: APIM Changelog << pipeline.parameters.graviteeio_version >> can be completed <${RELEASE_NOTES_PR_URL}|here> @tech_writers_team :pray:"
                                      }
                                    }
                                  ]
                                }

    job-release_helm:
        executor:
            name: node-lts
            class: medium
        environment:
            VERSION: << pipeline.parameters.graviteeio_version >>
        steps:
            - checkout
            - keeper/env-export:
                  secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/field/login
                  var-name: GIT_USER_NAME
            - keeper/env-export:
                  secret-url: keeper://IZd-yvsMopfQEa_0j1SDvg/custom_field/email
                  var-name: GIT_USER_EMAIL
            - keeper/env-export:
                  secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
                  var-name: GITHUB_TOKEN
            - add_ssh_keys:
                  fingerprints:
                      - "ac:88:23:8f:c6:0f:7d:f0:fc:df:73:20:34:56:02:6c"
            - run:
                  name: Git config
                  command: |
                      git config --global user.name "${GIT_USER_NAME}"
                      git config --global user.email "${GIT_USER_EMAIL}"
            - gh/setup
            - helm/install_helm_client:
                version: v3.12.3
            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - run:
                            name: Update Chart and App versions
                            command: |
                                sed "0,/version.*/s/version.*/version: ${VERSION}/" -i helm/Chart.yaml
                                sed "0,/appVersion.*/s/appVersion.*/appVersion: ${VERSION}/" -i helm/Chart.yaml
            - run:
                  name: "build the Charts"
                  working_directory: "./helm"
                  command: |
                      helm dependency update
                      helm package -d charts .

                      sed "s/name.*/name: apim3/" -i Chart.yaml
                      helm package -d charts .
            - run:
                  name: Install dependencies
                  command: npm install
                  working_directory: "./release"
            - when:
                  condition:
                      not: << pipeline.parameters.dry_run>>
                  steps:
                      - run:
                            name: "Open a PR to publish helm chart release into helm-charts repository"
                            working_directory: "./release"
                            command: npm run zx -- ci-steps/release-helm.mjs --version=${VERSION}
            - when:
                  condition: << pipeline.parameters.dry_run>>
                  steps:
                      - keeper/env-export:
                            secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/login
                            var-name: ACR_USER_NAME
                      - keeper/env-export:
                            secret-url: keeper://Q721P2LSOPJ9qiXLuf5AHQ/field/password
                            var-name: ACR_PASSWORD
                      - run:
                            name: "Publish helm chart release in azure repository DRY-RUN mode"
                            working_directory: "./helm"
                            command: |
                                helm registry login graviteeio.azurecr.io --username $ACR_USER_NAME --password $ACR_PASSWORD
                                helm push charts/apim-${VERSION}.tgz oci://graviteeio.azurecr.io/helm/
                                helm push charts/apim3-${VERSION}.tgz oci://graviteeio.azurecr.io/helm/

    job-publish-pr-env-urls:
        executor:
            name: node-lts
            class: small
        steps:
            - checkout
            - keeper/env-export:
                  secret-url: keeper://TIlcGPFq4rN5GvgnZb9hng/field/password
                  var-name: GITHUB_TOKEN
            - gh/setup
            - cmd-compute-sanitize-circleci-branch
            - run:
                  name: Edit Pull Request Description
                  command: |
                      # First check there is an associated pull request, otherwise just stop the job here
                      if ! gh pr view --json title;
                      then
                        echo "No PR found for this branch, stopping the job here."
                        exit 0
                      fi

                      # If PR state is different from OPEN
                      if [ "$(gh pr view --json state --jq .state)" != "OPEN" ];
                      then
                        echo "PR is not opened, stopping the job here."
                        exit 0
                      fi
                      export PR_NUMBER=$(gh pr view --json number --jq .number)
                      export PR_BODY_ENV_SECTION="
                      <!-- Environment placeholder -->

                      🏗️ Your changes can be tested here and will be available soon:
                            Console: [https://pr.team-apim.gravitee.dev/$PR_NUMBER/console](https://pr.team-apim.gravitee.dev/$PR_NUMBER/console)
                            Portal: [https://pr.team-apim.gravitee.dev/$PR_NUMBER/portal](https://pr.team-apim.gravitee.dev/$PR_NUMBER/portal)
                            Management-api: [https://pr.team-apim.gravitee.dev/$PR_NUMBER/api/management](https://pr.team-apim.gravitee.dev/$PR_NUMBER/api/management)
                            Gateway v4: [https://pr.team-apim.gravitee.dev/$PR_NUMBER](https://pr.team-apim.gravitee.dev/$PR_NUMBER)
                            Gateway v3: [https://pr.gateway-v3.team-apim.gravitee.dev/$PR_NUMBER](https://pr.gateway-v3.team-apim.gravitee.dev/$PR_NUMBER)

                      <!-- Environment placeholder end -->
                      "

                      export CLEAN_BODY=$(gh pr view --json body --jq .body | sed '/Environment placeholder -->/,/Environment placeholder end -->/d')

                      gh pr edit --body "$CLEAN_BODY$PR_BODY_ENV_SECTION"

            - cmd-notify-on-failure

    job-test-apim-charts:
        docker:
            - image: cimg/base:stable
        resource_class: small
        steps:
            - checkout
            - helm/install_helm_client:
                  version: v3.12.3
            - run:
                  name: install helm-unittest plugin
                  command: helm plugin install https://github.com/helm-unittest/helm-unittest.git --version 0.5.1
            - cmd-helm-lint:
                  folder: helm/
            - cmd-helm-tests:
                  folder: helm/
                  files: tests/**/*.yaml
                  output-file: apim-result.xml
            - store_test_results:
                  path: apim-result.xml

    job-snyk-apim-charts:
        docker:
            - image: cimg/base:stable
        resource_class: small
        steps:
            - checkout
            - keeper/env-export:
                  secret-url: keeper://s83JmReKpBZWjHdud6ZAlg/custom_field/gravitee_apim_org_api_token
                  var-name: SNYK_TOKEN
            - helm/install_helm_client:
                version: v3.12.3
            - snyk/install
            - run:
                  name: "build the Charts output and scan"
                  working_directory: "./helm"
                  command: |
                      helm dependency update
                      helm template . --output-dir ./output
                      snyk iac test ./output --report --target-reference="${CIRCLE_BRANCH}" --project-tags=version=${CIRCLE_BRANCH} --severity-threshold=high

workflows:
    pull_requests:
        when:
            and:
                - equal: [pull_requests, << pipeline.parameters.gio_action >>]
        jobs:
            - job-community-build:
                  name: Check build as Community user
                  context: cicd-orchestrator
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                              - /.*-run-e2e.*/
                              - /.*merge.*/
            - job-setup:
                  name: Setup
                  context: cicd-orchestrator
            - job-validate:
                  name: Validate backend
                  context: cicd-orchestrator
                  requires:
                      - Setup
            - job-snyk-apim-charts:
                  name: scan snyk Helm chart
                  context: cicd-orchestrator
                  requires:
                      - Setup
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - job-danger-js:
                  name: Run Danger JS
                  context: cicd-orchestrator
                  requires:
                      - Validate backend
            - job-build:
                  name: Build backend
                  context: cicd-orchestrator
                  requires:
                      - Validate backend
            - job-build-images:
                  name: Build and push rest api and gateway images
                  context: cicd-orchestrator
                  requires:
                      - Build backend
                  filters:
                      branches:
                          only:
                              - master
                              - /.*-run-e2e.*/
                              - /.*merge.*/
                              - /^\d+\.\d+\.x$/
            - job-test:
                  name: Test backend
                  context: cicd-orchestrator
                  requires:
                      - Build backend
            - job-test-apim-charts:
                  name: Test Helm chart
                  requires:
                      - Build backend
            - job-sonarcloud-analysis:
                  name: Sonar - << matrix.working_directory >>
                  matrix:
                      parameters:
                          working_directory:
                              - gravitee-apim-rest-api
                              - gravitee-apim-gateway
                              - gravitee-apim-definition
                  context: cicd-orchestrator
                  component: << matrix.working_directory >>
                  requires:
                      - Test backend
            - job-test-integration:
                  name: Integration tests
                  context: cicd-orchestrator
                  requires:
                      - Build backend
            - job-test-plugin:
                  name: Test plugins
                  context: cicd-orchestrator
                  requires:
                      - Build backend
            - job-sonarcloud-analysis:
                  name: Sonar - gravitee-apim-plugin
                  working_directory: gravitee-apim-plugin
                  context: cicd-orchestrator
                  component: gravitee-apim-plugin
                  requires:
                      - Test plugins
            - job-test-repository:
                  name: Test repository
                  context: cicd-orchestrator
                  requires:
                      - Build backend
            - job-sonarcloud-analysis:
                  name: Sonar - gravitee-apim-repository
                  working_directory: gravitee-apim-repository
                  context: cicd-orchestrator
                  component: gravitee-apim-repository
                  requires:
                      - Test repository
            - job-publish-on-artifactory:
                  name: Publish on artifactory
                  context: cicd-orchestrator
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                  requires:
                      - Test backend
                      - Test plugins
                      - Test repository
                      # - Integration tests
            - job-publish-on-nexus:
                  name: Publish on nexus
                  context: cicd-orchestrator
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
                  requires:
                      - Test backend
                      - Test plugins
                      - Test repository
                      # - Integration tests
            - job-webui-lint-test:
                  name: Lint & test APIM Console
                  context: cicd-orchestrator
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - Setup
            - job-sonarcloud-analysis:
                  name: Sonar - gravitee-apim-console-webui
                  working_directory: gravitee-apim-console-webui
                  context: cicd-orchestrator
                  component: gravitee-apim-console-webui
                  requires:
                      - Lint & test APIM Console
            - job-console-webui-build-storybook:
                  context: cicd-orchestrator
                  name: Build Console Storybook
                  requires:
                      - Setup
                  resource_class: large
            - job-console-webui-chromatic-deployment:
                  name: Deploy console in chromatic
                  context: cicd-orchestrator
                  requires:
                      - Build Console Storybook
            - job-webui-build:
                  name: Build APIM Console and publish image
                  context: cicd-orchestrator
                  apim-ui-project: gravitee-apim-console-webui
                  docker-image-name: apim-management-ui
                  requires:
                      - Setup
            - job-webui-lint-test:
                  name: Lint & test APIM Portal
                  context: cicd-orchestrator
                  apim-ui-project: gravitee-apim-portal-webui
                  resource-class: large
                  requires:
                      - Setup
            - job-sonarcloud-analysis:
                  name: Sonar - gravitee-apim-portal-webui
                  working_directory: gravitee-apim-portal-webui
                  context: cicd-orchestrator
                  component: gravitee-apim-portal-webui
                  requires:
                      - Lint & test APIM Portal
            - job-webui-build:
                  name: Build APIM Portal and publish image
                  context: cicd-orchestrator
                  apim-ui-project: gravitee-apim-portal-webui
                  docker-image-name: apim-portal-ui
                  requires:
                      - Setup
            - job-test-apim-charts:
                  name: Helm Chart - Lint & Test
            - job-deploy-on-azure-cluster:
                  context: cicd-orchestrator
                  requires:
                      - Test backend
                      - Test plugins
                      - Test repository
                      # - Integration tests
                      - Build and push rest api and gateway images
                      - Build APIM Console and publish image
                      - Build APIM Portal and publish image
                  filters:
                      branches:
                          only:
                              - master
                              - /^\d+\.\d+\.x$/
            - job-e2e-generate-sdk:
                  name: Generate e2e tests SDK
                  context: cicd-orchestrator
                  requires:
                      - Build backend
            - job-e2e-lint-build:
                  name: Lint & Build APIM e2e
                  context: cicd-orchestrator
                  requires:
                      - Generate e2e tests SDK
            - job-e2e-test:
                  context: cicd-orchestrator
                  name: Test APIM E2E - << matrix.execution_mode >> - << matrix.database >>
                  requires:
                      - Lint & Build APIM e2e
                      - Build and push rest api and gateway images
                  matrix:
                      parameters:
                          execution_mode: ["v3", "v4-emulation-engine"]
                          database: ["mongo", "jdbc", "bridge"]
                  filters:
                      branches:
                          only:
                              - master
                              - /.*-run-e2e.*/
                              - /.*merge.*/
                              - /^\d+\.\d+\.x$/
            - job-e2e-cypress:
                  context: cicd-orchestrator
                  name: Run Cypress UI tests
                  requires:
                      - Lint & Build APIM e2e
                      - Build APIM Portal and publish image
                      - Build APIM Console and publish image
                      - Build and push rest api and gateway images
                  filters:
                      branches:
                          only:
                              - master
                              - /.*-run-e2e.*/
                              - /.*merge.*/
                              - /^\d+\.\d+\.x$/
            - job-perf-lint-build:
                  name: Lint & Build APIM perf
                  context: cicd-orchestrator
                  requires:
                      - Generate e2e tests SDK

    build-rpm:
      jobs:
        - job-publish-rpm-packages:
            context: cicd-orchestrator
            graviteeio_version: << pipeline.parameters.graviteeio_version >>
            dry_run: << pipeline.parameters.dry_run >>
            name: Build and push RPM packages for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>

    build_docker_images:
        when:
            equal: [build_docker_images, << pipeline.parameters.gio_action >>]
        jobs:
            - job-publish-prod-docker-images:
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
                  docker_tag_as_latest: << pipeline.parameters.docker_tag_as_latest >>
                  dry_run: << pipeline.parameters.dry_run >>
                  context: cicd-orchestrator
                  name: Build and push docker images for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
            - job-add-docker-images-in-snyk:
                  name: Add images to snyk
                  context: cicd-orchestrator
                  requires:
                      - Build and push docker images for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>

    release_helm:
        when:
            equal: [release_helm, << pipeline.parameters.gio_action >>]
        jobs:
            - job-test-apim-charts:
                  name: APIM - Lint & Test
            - job-release_helm:
                  context: cicd-orchestrator
                  requires:
                      - APIM - Lint & Test

    full_release:
        when:
            equal: [full_release, << pipeline.parameters.gio_action >>]
        jobs:
            # Prepare
            - job-setup:
                  name: Setup
                  context: cicd-orchestrator
            - job-slack-announcement:
                  name: Announce release is starting
                  context: cicd-orchestrator
                  message: 🚀 Starting APIM << pipeline.parameters.graviteeio_version >> release

            # APIM Portal
            - job-webui-build:
                  context: cicd-orchestrator
                  name: Build APIM Portal and publish image
                  apim-ui-project: gravitee-apim-portal-webui
                  docker-image-name: apim-portal-ui
                  requires:
                      - Setup
            - job-webui-publish-artifactory:
                  context: cicd-orchestrator
                  name: Publish APIM Portal to artifactory
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - Build APIM Portal and publish image
            # APIM Console
            - job-webui-build:
                  context: cicd-orchestrator
                  name: Build APIM Console and publish image
                  apim-ui-project: gravitee-apim-console-webui
                  docker-image-name: apim-management-ui
                  requires:
                      - Setup
            - job-webui-publish-artifactory:
                  context: cicd-orchestrator
                  name: Publish APIM Console to artifactory
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - Build APIM Console and publish image
            # APIM Backend
            - job-backend-build-and-publish-artifactory:
                  name: Backend build and publish to artifactory
                  requires:
                      - Setup
                  context: cicd-orchestrator

            # Commit and set next version
            - job-release-commit-and-prepare-next-version:
                  name: Commit and prepare next version
                  requires:
                      - Backend build and publish to artifactory
                      - Publish APIM Console to artifactory
                      - Publish APIM Portal to artifactory
                  context: cicd-orchestrator

            # Package bundle
            - job-package-bundle:
                  name: Package bundle
                  context: cicd-orchestrator
                  requires:
                      - Commit and prepare next version

            # Release Helm chart
            - job-release_helm:
                  name: Release Helm Chart
                  context: cicd-orchestrator
                  requires:
                      - Package bundle

            # Publish Docker images
            - job-publish-prod-docker-images:
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
                  docker_tag_as_latest: << pipeline.parameters.docker_tag_as_latest >>
                  dry_run: << pipeline.parameters.dry_run >>
                  context: cicd-orchestrator
                  name: Build and push docker images for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
                  requires:
                      - Package bundle
            # Add docker images in Snyk
            - job-add-docker-images-in-snyk:
                  name: Push docker images to Snyk
                  context: cicd-orchestrator
                  requires:
                      - Build and push docker images for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
            # Publish RPM Packages
            - job-publish-rpm-packages:
                  context: cicd-orchestrator
                  graviteeio_version: << pipeline.parameters.graviteeio_version >>
                  dry_run: << pipeline.parameters.dry_run >>
                  name: Build and push RPM packages for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
                  requires:
                      - Package bundle
            # Create Release note pull request
            - job-release-notes-apim:
                  name: Create release note pull request
                  context: cicd-orchestrator
                  requires:
                      - Package bundle
            # Nexus staging
            - job-nexus-staging:
                  name: Nexus staging
                  context: cicd-orchestrator
                  requires:
                      - Package bundle
            - job-slack-announcement:
                  name: Announce end of release
                  message: 🎆 APIM - << pipeline.parameters.graviteeio_version >> released!
                  context: cicd-orchestrator
                  requires:
                      - Nexus staging
                      - Build and push RPM packages for APIM << pipeline.parameters.graviteeio_version >><<# pipeline.parameters.dry_run >> - Dry Run<</ pipeline.parameters.dry_run >>
                      - Push docker images to Snyk
                      - Create release note pull request
                      - Release Helm Chart

    release:
        when:
            equal: [release, << pipeline.parameters.gio_action >>]
        jobs:
            # Prepare
            - job-setup:
                  name: Setup
                  context: cicd-orchestrator
            - job-slack-announcement:
                  name: Announce release is starting
                  context: cicd-orchestrator
                  message: 🚀 Starting APIM << pipeline.parameters.graviteeio_version >> release

            # APIM Portal
            - job-webui-build:
                  context: cicd-orchestrator
                  name: Build APIM Portal and publish image
                  apim-ui-project: gravitee-apim-portal-webui
                  docker-image-name: apim-portal-ui
                  requires:
                      - Setup
            - job-webui-publish-artifactory:
                  context: cicd-orchestrator
                  name: Publish APIM Portal to artifactory
                  apim-ui-project: gravitee-apim-portal-webui
                  requires:
                      - Build APIM Portal and publish image
            # APIM Console
            - job-webui-build:
                  context: cicd-orchestrator
                  name: Build APIM Console and publish image
                  apim-ui-project: gravitee-apim-console-webui
                  docker-image-name: apim-management-ui
                  requires:
                      - Setup
            - job-webui-publish-artifactory:
                  context: cicd-orchestrator
                  name: Publish APIM Console to artifactory
                  apim-ui-project: gravitee-apim-console-webui
                  requires:
                      - Build APIM Console and publish image
            # APIM Backend
            - job-backend-build-and-publish-artifactory:
                  name: Backend build and publish to artifactory
                  requires:
                      - Setup
                  context: cicd-orchestrator

            # Commit and set next version
            - job-release-commit-and-prepare-next-version:
                  name: Commit and prepare next version
                  requires:
                      - Backend build and publish to artifactory
                      - Publish APIM Console to artifactory
                      - Publish APIM Portal to artifactory
                  context: cicd-orchestrator

    package_bundle:
        when:
            equal: [package_bundle, << pipeline.parameters.gio_action >>]
        jobs:
            - job-package-bundle:
                  name: Package bundle
                  context: cicd-orchestrator

    nexus_staging:
        when:
            equal: [nexus_staging, << pipeline.parameters.gio_action >>]
        jobs:
            - job-setup:
                  name: Setup
                  context: cicd-orchestrator
            - job-nexus-staging:
                  name: Nexus staging
                  context: cicd-orchestrator
                  requires:
                      - Setup
            - job-slack-announcement:
                  message: 🎆 APIM - << pipeline.parameters.graviteeio_version >> released!
                  name: Announce end of release
                  context: cicd-orchestrator
                  requires:
                      - Nexus staging

    db_repositories_test_container:
        when:
            equal: [repositories_tests, << pipeline.parameters.gio_action >>]
        jobs:
            - job-setup:
                  name: Setup
                  context: cicd-orchestrator
            - job-build:
                  name: Build
                  context: cicd-orchestrator
                  requires:
                      - Setup
            - job-jdbc-test-container:
                  name: Management repository tests - JDBC - << matrix.version >>
                  context: cicd-orchestrator
                  requires:
                      - Build
                  matrix:
                      parameters:
                          version:
                              [
                                  "postgresql~11",
                                  "postgresql~12",
                                  "postgresql~13",
                                  "postgresql~14",
                                  "postgresql~15",
                                  "mariadb~10.4",
                                  "mariadb~10.5",
                                  "mariadb~10.6",
                                  "mariadb~10.10",
                                  "mariadb~10.11",
                                  "mariadb~11",
                                  "mysql~5.7",
                                  "mysql~8.0",
                                  "sqlserver~2017-latest",
                                  "sqlserver~2019-latest",
                                  "sqlserver~2022-latest",
                              ]
            - job-mongo-test-container:
                  name: Management repository tests - Mongo << matrix.version >>
                  context: cicd-orchestrator
                  requires:
                      - Build
                  matrix:
                      parameters:
                          version: ["4.4", "5.0", "6.0", "7.0"]
            - job-elastic-test-container:
                  name: Analytics repository tests - ElasticSearch << matrix.version >>
                  context: cicd-orchestrator
                  requires:
                      - Build
                  matrix:
                      parameters:
                          engineType: ["elasticsearch"]
                          version: ["7.17.10", "8.8.1"]
            - job-elastic-test-container:
                  name: Analytics repository tests - OpenSearch << matrix.version >>
                  context: cicd-orchestrator
                  requires:
                      - Build
                  matrix:
                      parameters:
                          engineType: ["opensearch"]
                          version: ["1", "2"]
            - job-redis-repository-test-container:
                  name: Rate Limit repository tests - Redis << matrix.version >>
                  context: cicd-orchestrator
                  requires:
                      - Build
                  matrix:
                      parameters:
                          version: ["6.2.6-v9", "7.0.6-RC9"]

    release_notes_apim:
        when:
            equal: [release_notes_apim, << pipeline.parameters.gio_action >>]
        jobs:
            - job-release-notes-apim:
                  name: Generate release note and create PR
                  context: cicd-orchestrator

    bridge_compatibility_tests:
        when:
            equal: [bridge_e2e, << pipeline.parameters.gio_action >>]
        jobs:
            - job-setup:
                  name: Setup
                  context: cicd-orchestrator
            - job-validate:
                  name: Validate
                  context: cicd-orchestrator
                  requires:
                      - Setup
            - job-build:
                  name: Build
                  context: cicd-orchestrator
                  requires:
                      - Validate
            - job-e2e-generate-sdk:
                  name: Generate e2e tests SDK
                  context: cicd-orchestrator
                  requires:
                      - Build
            - job-e2e-lint-build:
                  name: Lint & Build APIM e2e
                  context: cicd-orchestrator
                  requires:
                      - Generate e2e tests SDK
            - job-e2e-test:
                  context: cicd-orchestrator
                  name: E2E - << matrix.execution_mode >> - << matrix.apim_client_tag >>
                  requires:
                      - Lint & Build APIM e2e
                  matrix:
                      parameters:
                          execution_mode: ["v3", "v4-emulation-engine"]
                          database: ["bridge"]
                          apim_client_tag: ["4.0.x-latest", "3.20.x-latest", "3.19.x-latest"]

    publish_docker_images:
        when:
            and:
                - equal: [publish_docker_images, << pipeline.parameters.gio_action >>]
        jobs:
            - job-setup:
                  name: Setup
                  context: cicd-orchestrator
            - job-build:
                  name: Build backend
                  context: cicd-orchestrator
                  requires:
                      - Setup
            - job-build-images:
                  name: Build and push rest api and gateway images
                  context: cicd-orchestrator
                  requires:
                      - Build backend
            - job-webui-build:
                  name: Build APIM Console and publish image
                  context: cicd-orchestrator
                  apim-ui-project: gravitee-apim-console-webui
                  docker-image-name: apim-management-ui
                  requires:
                      - Setup
            - job-webui-build:
                  name: Build APIM Portal and publish image
                  context: cicd-orchestrator
                  apim-ui-project: gravitee-apim-portal-webui
                  docker-image-name: apim-portal-ui
                  requires:
                      - Setup
            - job-publish-pr-env-urls:
                  name: Publish environment URLs in Github PR
                  context: cicd-orchestrator
                  requires:
                      - Build and push rest api and gateway images
                      - Build APIM Console and publish image
                      - Build APIM Portal and publish image
